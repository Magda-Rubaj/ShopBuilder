version: '3'

services:
  catalog-db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${CATALOG_DBNAME}
      - POSTGRES_USER=${CATALOG_DBUSER}
      - POSTGRES_PASSWORD=${CATALOG_DBPASSWORD}
    logging:
      driver: none
    volumes: 
      - catalog-db:/var/lib/postgresql/data
    networks:
      - sb

  catalog:
    container_name: catalog
    build:
      context: ./src/services/catalog
      dockerfile: Dockerfile
    command: uvicorn main:app --reload --host 0.0.0.0 --port 5300
    working_dir: /usr/bin/catalog
    volumes:
      - ./src/services/catalog:/usr/bin/catalog
    restart: on-failure
    environment:
      - DBNAME=${CATALOG_DBNAME}
      - DBUSER=${CATALOG_DBUSER}
      - DBPASSWORD=${CATALOG_DBPASSWORD}
      - AMQP_URL=${AMQP_URL}
      - SECRET_KEY=${CATALOG_SECRET_KEY}
      - DBURL=${CATALOG_DB_URL}
    networks:
      - sb
    depends_on:
      rabbitmq:
        condition: service_healthy
      catalog-db:
        condition: service_started
    ports:
      - "5300:5300"

  orders-db:
    image: mongo:latest
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${ORDERS_DB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${ORDERS_DB_PASSWORD}
      - MONGO_INITDB_DATABASE=${ORDERS_DB_NAME}
    logging:
      driver: none
    ports:
      - 27017:27017
    volumes:
      - orders-db:/data/db
    networks:
      - sb
  
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${ORDERS_DB_USER}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${ORDERS_DB_PASSWORD}
      - ME_CONFIG_MONGODB_SERVER=orders-db
      - ME_CONFIG_MONGODB_PORT="27017"
    ports:
      - "0.0.0.0:8081:8081"
    networks:
      - sb
    depends_on:
      - orders-db

  orders:
    build:
      context: ./src/services/orders
      dockerfile: Dockerfile
    command: uvicorn main:app --reload --host 0.0.0.0 --port 5000
    working_dir: /usr/bin/orders
    volumes:
      - ./src/services/orders:/usr/bin/orders
    restart: on-failure
    environment:   
      - SECRET_KEY=${ORDERS_SECRET_KEY}
      - DB_URL=${ORDERS_DB_URL}
      - DB_NAME=${ORDERS_DB_NAME}
      - AMQP_URL=${AMQP_URL}
    networks:
      - sb
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "5000:5000"

  basket-store:
    image: redis:latest
    volumes: 
      - basket-store:/redis/data
    ports:
      - 6379:6379
    networks:
      - sb
    
  basket:
    build:
      context: ./src/services/basket
      dockerfile: Dockerfile
    command: uvicorn main:app --reload --host 0.0.0.0 --port 5100
    working_dir: /usr/bin/basket
    volumes:
      - ./src/services/basket:/usr/bin/basket
    restart: on-failure
    environment:   
      - REDIS_URL=${BASKET_REDIS_URL}
    networks:
      - sb
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "5100:5100"
  
  identity-guests-store:
    image: redis:latest
    command: --port 6377
    volumes: 
      - identity-guests-store:/redis/data
    ports:
      - "6377:6377"
    expose:
      - "6377"
    networks:
      - sb

  identity:
    build:
      context: ./src/services/identity
      dockerfile: Dockerfile
    command: uvicorn main:app --reload --host 0.0.0.0 --port 5200 
    working_dir: /usr/bin/identity
    volumes:
      - ./src/services/identity:/usr/bin/identity
    restart: on-failure
    environment:   
      - REDIS_URL=${IDENTITY_REDIS_URL}
    networks:
      - sb
    depends_on:
      rabbitmq:
        condition: service_healthy
      identity-guests-store:
        condition: service_started
    ports:
      - "5200:5200"

  gateway:
    build:
      context: ./src/gateways
      dockerfile: Dockerfile
    command: uvicorn main:app --reload --host 0.0.0.0 --port 8000 
    working_dir: /usr/bin/gateway
    volumes:
      - ./src/gateways:/usr/bin/gateway
    restart: on-failure
    environment:   
      - CATALOG_URL=${CATALOG_URL}
      - BASKET_URL=${BASKET_URL}
    networks:
      - sb
    depends_on:
      - catalog
      - orders
    ports:
      - "8000:8000"

  rabbitmq:
    container_name: 'rabbitmq'
    image: rabbitmq:3-management-alpine
    logging:
      driver: none
    healthcheck:
      test: ["CMD-SHELL", " netstat -an | grep -q 5672"]
    networks:
      - sb
    ports:
      - 5672:5672
      - 15672:15672


volumes:
  catalog-db:
    driver: local
  orders-db:
    driver: local
  basket-store:
    driver: local
  identity-guests-store:
    driver: local

networks:
    sb:
      driver: bridge